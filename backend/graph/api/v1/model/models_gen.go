// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Contributor struct {
	ID      string              `json:"id"`
	Name    string              `json:"name"`
	Image   *string             `json:"image"`
	Details *ContributorDetails `json:"details"`
}

type ContributorDetails struct {
	Biography     *string `json:"biography"`
	OriginCountry *string `json:"originCountry"`
}

type Participant struct {
	Type        ParticipantType `json:"type"`
	Contributor *Contributor    `json:"contributor"`
}

type Song struct {
	ID           string         `json:"id"`
	Title        string         `json:"title"`
	Details      *string        `json:"details"`
	Participants []*Participant `json:"participants"`
}

type ParticipantType string

const (
	ParticipantTypeAuthor   ParticipantType = "author"
	ParticipantTypeComposer ParticipantType = "composer"
	ParticipantTypeArranger ParticipantType = "arranger"
	ParticipantTypeArtist   ParticipantType = "artist"
	ParticipantTypeEditor   ParticipantType = "editor"
)

var AllParticipantType = []ParticipantType{
	ParticipantTypeAuthor,
	ParticipantTypeComposer,
	ParticipantTypeArranger,
	ParticipantTypeArtist,
	ParticipantTypeEditor,
}

func (e ParticipantType) IsValid() bool {
	switch e {
	case ParticipantTypeAuthor, ParticipantTypeComposer, ParticipantTypeArranger, ParticipantTypeArtist, ParticipantTypeEditor:
		return true
	}
	return false
}

func (e ParticipantType) String() string {
	return string(e)
}

func (e *ParticipantType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantType", str)
	}
	return nil
}

func (e ParticipantType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
